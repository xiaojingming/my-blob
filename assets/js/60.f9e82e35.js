(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{617:function(t,e,a){"use strict";a.r(e);var n=a(13),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"without"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#without"}},[t._v("#")]),t._v(" Without")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/type-challenges/type-challenges/blob/main/questions/05117-medium-without/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("type-challenge github地址"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("难度：中等")]),t._v(" "),a("h4",{attrs:{id:"题目描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[t._v("#")]),t._v(" 题目描述")]),t._v(" "),a("p",[t._v("Implement the type version of Lodash.without, "),a("code",[t._v("Without<T, U>")]),t._v(" takes an Array T, number or array U and returns an Array without the elements of U.")]),t._v(" "),a("blockquote",[a("p",[t._v("(实现一个像 Lodash.without 函数一样的泛型 Without<T, U>，它接收数组类型的 T 和数字或数组类型的 U 为参数，会返回一个去除 U 中元素的数组 T。)")])]),t._v(" "),a("p",[t._v("For example:")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type Res = Without<[1, 2], 1>; // expected to be [2]\ntype Res1 = Without<[1, 2, 4, 1, 5], [1, 2]>; // expected to be [4, 5]\ntype Res2 = Without<[2, 3, 2, 3, 2, 3, 2, 3], [2, 3]>; // expected to be []\n")])])]),a("p",[t._v("这道题需要通过递归来实现，一开始在做这道题的时候，先去判断第二个参数是不是数组，然后进行了比较长的判断（最后还没实现😥），然后在查找答案的时候发现了一种解题思路，当第二个参数是"),a("code",[t._v("number")]),t._v("时，不需要进行特殊处理，而当第二个参数时"),a("code",[t._v("number[]")]),t._v("时，我们将其转化成为联合类型，通过联合类型进行判断就会简单很多。首先我们实现获取联合类型的泛型")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type GetUnion<T> = T extends any[] ? T[number] : T;\n")])])]),a("p",[t._v("接着我们来实现这个"),a("code",[t._v("Without")]),t._v("泛型，依次对"),a("code",[t._v("T")]),t._v("的每一项进行判断，判断联合类型是否包含这一项")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("type Without<T extends number[], K extends number | number[]> = T extends [infer F, ...infer Rest]\n  ? F extends GetUnion<K>\n    ? Without<Rest, K>\n    : [F, ...Without<Rest, K>]\n  : [];\n")])])]),a("p",[t._v("这样就可以实现啦。")])])}),[],!1,null,null,null);e.default=s.exports}}]);