(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{578:function(e,t,r){"use strict";r.r(t);var s=r(13),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h3",{attrs:{id:"fliparguments"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#fliparguments"}},[e._v("#")]),e._v(" FlipArguments")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/type-challenges/type-challenges/blob/main/questions/03196-medium-flip-arguments/README.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("type-challenge-FlipArguments github地址"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("难度：中等")]),e._v(" "),r("h4",{attrs:{id:"题目描述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[e._v("#")]),e._v(" 题目描述")]),e._v(" "),r("p",[e._v("Implement the type version of lodash's _.flip.")]),e._v(" "),r("p",[e._v("Type FlipArguments"),r("code",[e._v("<T>")]),e._v(" requires function type T and returns a new function type which has the same return type of T but reversed parameters.")]),e._v(" "),r("blockquote",[r("p",[e._v("(实现"),r("code",[e._v("FlipArguments<T>")]),e._v("，接收一个函数类型，并返回函数参数颠倒的新函数类型)")])]),e._v(" "),r("p",[e._v("For example:")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("type Flipped = FlipArguments<(arg0: string, arg1: number, arg2: boolean) => void> \n// (arg0: boolean, arg1: number, arg2: string) => void\n")])])]),r("p",[e._v("我们只需要通过"),r("code",[e._v("infer")]),e._v("推断出参数和结果类型，让后调用上一章实现"),r("RouterLink",{attrs:{to:"/TypeScript/Reverse.html"}},[e._v("Reverse")]),e._v("颠倒参数并生成新的函数类型即可。")],1),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("type Reverse<T extends any[]> = T extends [...infer Rest, infer Last]\n  ? [Last, ...Reverse<Rest>]\n  : [];\ninferface F {\n  (...res: any[]): any,\n}\ntype FlipArguments<T extends F> = T extends ((...params: infer Params) => infer Result)\n  ? (...res: Reverse<Params>) => Result\n  : never;\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);