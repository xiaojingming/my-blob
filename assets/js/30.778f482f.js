(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{583:function(e,t,s){"use strict";s.r(t);var n=s(13),r=Object(n.a)({},(function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h3",{attrs:{id:"isnever"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#isnever"}},[e._v("#")]),e._v(" IsNever")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/type-challenges/type-challenges/blob/main/questions/01042-medium-isnever/README.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("type-challenge-isNever  github地址"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("难度：中等")]),e._v(" "),s("h4",{attrs:{id:"题目描述"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[e._v("#")]),e._v(" 题目描述")]),e._v(" "),s("p",[e._v("Implement a type IsNever, which takes input type T. If the type of resolves to never, return true, otherwise false.")]),e._v(" "),s("blockquote",[s("p",[e._v("(判断输入类型是否是never，是never类型则返回true，否则返回false)")])]),e._v(" "),s("p",[e._v("For example:")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("type A = IsNever<never>  // expected to be true\ntype B = IsNever<undefined> // expected to be false\ntype C = IsNever<null> // expected to be false\ntype D = IsNever<[]> // expected to be false\ntype E = IsNever<number> // expected to be false\n")])])]),s("p",[e._v("一开始在看到这个题目的时候，很容易就会想到：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("type IsNever<T> = T extends never ? true : false\n")])])]),s("p",[e._v("然而却不能判断never，类型A会得到never类型的结果，但是为什么是never类型呢？这主要是当"),s("strong",[e._v("never")]),e._v("在泛型中的特例，并不会触发"),s("strong",[e._v("extends")]),e._v("的判断，导致返回自身。")]),e._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/microsoft/TypeScript/issues/31751",target:"_blank",rel:"noopener noreferrer"}},[e._v("github上有人提出过这个问题"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("下面是点赞最多的评论：")]),e._v(" "),s("blockquote",[s("p",[e._v("This is the expected behavior, ExtendsNever is a distributive conditional type. Conditional types distribute over unions. Basically if T is a union ExtendsNever is applied to each member of the union and the result is the union of all applications (ExtendsNever<'a' | 'b'> == ExtendsNever<'a' > | ExtendsNever<'b'>). never is the empty union (ie a union with no members). This is hinted at by its behavior in a union 'a' | never == 'a'. So when distributing over never, ExtendsNever is never applied, since there are no members in this union and thus the result is never.")])]),e._v(" "),s("blockquote",[s("p",[e._v("大概的意思是never类型是空的联合类型，在TS处理泛型为联合类型时会进行分发，但是不会对never进行分发，所以返回never。")])]),e._v(" "),s("p",[e._v("正确的方法：")]),e._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("type IsNever<T> = [T] extends [never] ? true : false;\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);