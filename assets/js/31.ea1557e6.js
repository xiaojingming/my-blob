(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{584:function(e,t,a){"use strict";a.r(t);var s=a(13),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h3",{attrs:{id:"istuple"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#istuple"}},[e._v("#")]),e._v(" IsTuple")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/type-challenges/type-challenges/blob/main/questions/04484-medium-istuple/README.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("type-challenge-IsTuple github地址"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("难度：中等")]),e._v(" "),a("h4",{attrs:{id:"题目描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[e._v("#")]),e._v(" 题目描述")]),e._v(" "),a("p",[e._v("Implement a type IsTuple, which takes an input type T and returns whether T is tuple type.")]),e._v(" "),a("blockquote",[a("p",[e._v("(实现"),a("code",[e._v("IsTuple")]),e._v("，用于判断是否是元组类型)")])]),e._v(" "),a("p",[e._v("For example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type case1 = IsTuple<[number]> // true\ntype case2 = IsTuple<readonly [number]> // true\ntype case3 = IsTuple<number[]> // false\n")])])]),a("h4",{attrs:{id:"what-s-the-difference-between-tuples-and-arrays"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#what-s-the-difference-between-tuples-and-arrays"}},[e._v("#")]),e._v(" "),a("strong",[e._v("What’s the Difference Between Tuples and Arrays?")])]),e._v(" "),a("p",[e._v("Tuples are similar to arrays but more precise. Tuples have a precise number of elements (disregarding optional params). Tuples can also have a variety of types of elements, i.e. [string, number, string[]].")]),e._v(" "),a("p",[e._v("上面是我在网上找的关于数组和元组的区分，可以理解为元组是拥有精确的成员个数的类型，具体表现如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type Test<T extends readonly any[]> = number extends T['length'] ? true : false;\ntype t1 = Test<[number]> // false\ntype t2 = Test<number[]> // true\n")])])]),a("p",[e._v("元组类型的"),a("code",[e._v("length")]),e._v("属性的类型是固定的值，而数组的"),a("code",[e._v("length")]),e._v("是一个"),a("code",[e._v("number")]),e._v("，我们可以通过这个特性来进行判断。")]),e._v(" "),a("p",[e._v("从测试用例中我们发现，输入"),a("code",[e._v("never")]),e._v("类型会返回false")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type IsTuple<T> = [T] extends [never]\n  ? false\n  : T extends readonly any[]\n    ? number extends T['length']\n      ? false\n      : true\n    : false;\n")])])]),a("p",[e._v("在上面使用"),a("code",[e._v("T extends readonly any[]")]),e._v("因为"),a("code",[e._v("{ length: 1 }")]),e._v("不可以通过判断，使用"),a("code",[e._v("T['length']")]),e._v("则可以通过判断；且测试实例中存在"),a("code",[e._v("IsTuple<readonly [1]>")]),e._v("的判断，无法通过"),a("code",[e._v("T extends any[]")]),e._v("来进行判断，所以使用了"),a("code",[e._v("T extends readonly any[]")]),e._v("，这样就可以实现"),a("code",[e._v("IsTuple")]),e._v("啦😁")])])}),[],!1,null,null,null);t.default=n.exports}}]);