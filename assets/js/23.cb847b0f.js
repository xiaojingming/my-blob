(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{575:function(e,t,n){"use strict";n.r(t);var a=n(13),r=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h3",{attrs:{id:"fill"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#fill"}},[e._v("#")]),e._v(" Fill")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/type-challenges/type-challenges/blob/main/questions/04518-medium-fill/README.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("type-challenge-fill github地址"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("难度：中等")]),e._v(" "),n("h4",{attrs:{id:"题目描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[e._v("#")]),e._v(" 题目描述")]),e._v(" "),n("p",[n("code",[e._v("Fill")]),e._v(", a common JavaScript function, now let us implement it with types. "),n("code",[e._v("Fill<T, N, Start?, End?>")]),e._v(", as you can see,"),n("code",[e._v("Fill")]),e._v(" accepts four types of parameters, of which "),n("code",[e._v("T")]),e._v(" and "),n("code",[e._v("N")]),e._v(" are required parameters, and "),n("code",[e._v("Start")]),e._v(" and "),n("code",[e._v("End")]),e._v(" are optional parameters. The requirements for these parameters are: "),n("code",[e._v("T")]),e._v(" must be a tuple, "),n("code",[e._v("N")]),e._v(" can be any type of value, "),n("code",[e._v("Start")]),e._v(" and "),n("code",[e._v("End")]),e._v(" must be integers greater than or equal to 0.")]),e._v(" "),n("blockquote",[n("p",[e._v("(实现"),n("code",[e._v("fill")]),e._v("该类型接收四个参数，第一个参数"),n("code",[e._v("T")]),e._v("是数组类型，第二个参数"),n("code",[e._v("N")]),e._v("可以是任意类型，且第一二个参数是必须的，第三四个参数分别是开始和结束的位置"),n("code",[e._v("start")]),e._v("，"),n("code",[e._v("end")]),e._v(")")])]),e._v(" "),n("p",[e._v("在不考虑"),n("code",[e._v("start")]),e._v("和"),n("code",[e._v("end")]),e._v("的情况下我们先来实现全部替换的功能")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type Fill<\n  T extends any[],\n  N extends any,\n  Start extends number = 0,\n  End extends number = T['length'],\n> = T extends [infer First, ...infer Rest]\n  ? [N, ...Fill<Rest, N>]\n  : [];\n")])])]),n("p",[e._v("当"),n("code",[e._v("start")]),e._v("大于或者等于"),n("code",[e._v("end")]),e._v("时，直接返回原数组，这里用到了之前的\n"),n("RouterLink",{attrs:{to:"/TypeScript/GreaterThen.html"}},[e._v("GreaterThen")])],1),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type Fill<\n  T extends any[],\n  N extends any,\n  Start extends number = 0,\n  End extends number = T['length'],\n> = T extends [infer First, ...infer Rest]\n  ? Start extends End\n    ? T\n    : GreaterThen<Start, End> extends true\n      ? T\n      : [N, ...Fill<Rest, N, Start, End, [1, ...S]>] \n  : [];\n")])])]),n("p",[e._v("接下来就需要实现"),n("code",[e._v("Start")]),e._v("和"),n("code",[e._v("End")]),e._v("的功能，我们需要再添加一个参数"),n("code",[e._v("S")]),e._v("用于记录当前索引，当"),n("code",[e._v("S")]),e._v("与"),n("code",[e._v("Start")]),e._v("相等时，才开始进行替换，并且下一次递归时将"),n("code",[e._v("start")]),e._v("替换为当前索引")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type Fill<\n  T extends any[],\n  N extends any,\n  Start extends number = 0,\n  End extends number = T['length'],\n  S extends 1[] = [],\n> = T extends [infer First, ...infer Rest]\n  ? Start extends End\n    ? T\n    : GreaterThen<Start, End> extends true\n      ? T\n      : S['length'] extends Start\n        ? [N, ...Fill<Rest, N, Extract<[1, ...S]['length'], number>, End, [1, ...S]>]\n        : [First, ...Fill<Rest, N, Start, End, [1, ...S]>]\n  : [];\n")])])]),n("p",[e._v("这样就可以实现这个功能啦🤔")])])}),[],!1,null,null,null);t.default=r.exports}}]);