(window.webpackJsonp=window.webpackJsonp||[]).push([[54],{608:function(e,t,r){"use strict";r.r(t);var a=r(13),s=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h3",{attrs:{id:"trim"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#trim"}},[e._v("#")]),e._v(" Trim")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/type-challenges/type-challenges/blob/main/questions/00108-medium-trim/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("type-challenge github地址"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("Implement Trim"),r("code",[e._v("<T>")]),e._v(" which takes an exact string type and returns a new string with the whitespace from both ends removed.")]),e._v(" "),r("blockquote",[r("p",[e._v("(实现"),r("code",[e._v("Trim<T>")]),e._v("，它接收一个字符串类型，平且返回删除了开头和结尾空格的字符串)")])]),e._v(" "),r("p",[e._v("For example:")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("type trimed = Trim<'  Hello World  '> // expected to be 'Hello World'\n")])])]),r("p",[r("code",[e._v("Trim<T>")]),e._v("的实现可以先判断是否以空格开头，以空格开头则递归执行"),r("code",[e._v("Trim")]),e._v("，否则判断是否以空格结尾，再递归剩余部分。")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("type NullType = ' ' | '\\n' | '\\t';\ntype Trim<T> = T extends `${NullType}${infer Right}`\n  ? Trim<Right>\n  : T extends `${infer Left}${NullType}`\n    ? Trim<Left>\n    : T\n")])])]),r("p",[e._v("我们也可以直接使用联合类型来简化上面的代码")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("type Trim<T> = T extends `${NullType}${infer Rest}` | `${infer Rest}${NullType}` ? Trim<Rest> : T\n")])])])])}),[],!1,null,null,null);t.default=s.exports}}]);