(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{594:function(e,t,n){"use strict";n.r(t);var a=n(13),o=Object(a.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h3",{attrs:{id:"omit"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#omit"}},[e._v("#")]),e._v(" Omit")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/type-challenges/type-challenges/blob/main/questions/00003-medium-omit/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("type-challenge github地址"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("难度：中等")]),e._v(" "),n("h4",{attrs:{id:"题目描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[e._v("#")]),e._v(" 题目描述")]),e._v(" "),n("p",[e._v("Implement the built-in Omit<T, K> generic without using it.")]),e._v(" "),n("p",[e._v("Constructs a type by picking all properties from T and then removing K")]),e._v(" "),n("blockquote",[n("p",[e._v("(实现TS内置的"),n("code",[e._v("Omit<T, K>")]),e._v("泛型，"),n("code",[e._v("Omit")]),e._v("会创建一个省略"),n("code",[e._v("K")]),e._v("中的字段的对象)")])]),e._v(" "),n("p",[e._v("For example:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("interface Todo {\n  title: string\n  description: string\n  completed: boolean\n}\n\ntype TodoPreview = MyOmit<Todo, 'description' | 'title'>\n\nconst todo: TodoPreview = {\n  completed: false,\n}\n")])])]),n("p",[e._v("这道题我们只需要在创建对象的时候断言当前的"),n("code",[e._v("key")]),e._v("是否继承于"),n("code",[e._v("K")]),e._v("即可")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type Omit<T, K extends keyof T> = {\n  [Key in keyof T as Key extends K ? never : Key]: T[Key]\n}\n")])])])])}),[],!1,null,null,null);t.default=o.exports}}]);