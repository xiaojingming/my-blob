(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{606:function(e,t,r){"use strict";r.r(t);var a=r(13),n=Object(a.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h3",{attrs:{id:"trimleft"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#trimleft"}},[e._v("#")]),e._v(" TrimLeft")]),e._v(" "),r("p",[r("a",{attrs:{href:"https://github.com/type-challenges/type-challenges/blob/main/questions/00106-medium-trimleft/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("type-challenge github地址"),r("OutboundLink")],1)]),e._v(" "),r("p",[e._v("Implement TrimLeft"),r("code",[e._v("<T>")]),e._v(" which takes an exact string type and returns a new string with the whitespace beginning removed.")]),e._v(" "),r("blockquote",[r("p",[e._v("(实现"),r("code",[e._v("TrimLeft<T>")]),e._v("，它接收一个字符串类型，并且返回删除了开头的空格的字符串)")])]),e._v(" "),r("p",[e._v("For example:")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("type trimed = TrimLeft<'  Hello World  '> // 应推导出 'Hello World  '\n")])])]),r("p",[e._v("我们可以先定义用于表示空格的类型（空格、制表符、换行符），然后通过递归就可以实现这样的功能")]),e._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("type NullType = ' ' | '\\n' | '\\t';\ntype TrimLeft<T extends string> = T extends `${NullType}${infer Rest}` ? TrimLeft<Rest> : T;\n")])])])])}),[],!1,null,null,null);t.default=n.exports}}]);