(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{572:function(e,t,a){"use strict";a.r(t);var s=a(13),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h3",{attrs:{id:"awaited"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#awaited"}},[e._v("#")]),e._v(" Awaited")]),e._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/type-challenges/type-challenges/blob/main/questions/00189-easy-awaited/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("type-challenge github地址"),a("OutboundLink")],1)]),e._v(" "),a("p",[e._v("If we have a type which is wrapped type like Promise. How we can get a type which is inside the wrapped type?")]),e._v(" "),a("p",[e._v("For example: if we have Promise"),a("code",[e._v("<ExampleType>")]),e._v(" how to get ExampleType?")]),e._v(" "),a("blockquote",[a("p",[e._v("(实现类型Awaited，用于获取"),a("code",[e._v("Promise<ExampleType>")]),e._v("中的"),a("code",[e._v("ExampleType")]),e._v("类型)")])]),e._v(" "),a("p",[e._v("For example:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type ExampleType = Promise<string>\n\ntype Result = MyAwaited<ExampleType> // string\n")])])]),a("p",[e._v("这道题目看上去只需判断"),a("code",[e._v("T")]),e._v("是否继承"),a("code",[e._v("Promise<any>")]),e._v("即可，但是题目中的测试用例还对实现了"),a("code",[e._v("thenable")]),e._v("接口的类型进行了判断且能够推断出类型：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type T = { then: (onfulfilled: (arg: number) => any) => any }\ntype Res5 = MyAwaited<T> // number\n")])])]),a("p",[e._v("😂一开始我的想法是实现"),a("code",[e._v("then")]),e._v("的类型，后面发现内置了"),a("code",[e._v("PromiseLike<T>")]),e._v("的类型，有了"),a("code",[e._v("PromiseLike")]),e._v("就可以很方便地实现了")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("type MyAwaited<T extends PromiseLike<any>> = T extends PromiseLike<infer Type>\n  ? Type extends PromiseLike<any>\n    ? MyAwaited<Type>\n    : Type\n  : never;\n")])])]),a("p",[e._v("在第一次判断出"),a("code",[e._v("T")]),e._v("是"),a("code",[e._v("PromiseLike")]),e._v("类型时，递归执行这个类型函数，主要是处理"),a("code",[e._v("Promise")]),e._v("嵌套"),a("code",[e._v("Promise")]),e._v("的情况。")])])}),[],!1,null,null,null);t.default=n.exports}}]);