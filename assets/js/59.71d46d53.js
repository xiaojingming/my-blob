(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{612:function(e,t,n){"use strict";n.r(t);var s=n(13),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h3",{attrs:{id:"unique"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#unique"}},[e._v("#")]),e._v(" Unique")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/type-challenges/type-challenges/blob/main/questions/05360-medium-unique/README.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("type-challenge github地址"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("难度：中等")]),e._v(" "),n("h4",{attrs:{id:"题目描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[e._v("#")]),e._v(" 题目描述")]),e._v(" "),n("p",[e._v("Implement the type version of Lodash.uniq, Unique takes an Array T, returns the Array T without repeated values.")]),e._v(" "),n("blockquote",[n("p",[e._v("(实现类型的"),n("code",[e._v("lodash.uniq")]),e._v("函数，接收一个数组并返回去重后的数组)")])]),e._v(" "),n("p",[e._v("For example:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v('type Res = Unique<[1, 1, 2, 2, 3, 3]>;\n// expected to be [1, 2, 3]\ntype Res1 = Unique<[1, 2, 3, 4, 4, 5, 6, 7]>;\n// expected to be [1, 2, 3, 4, 5, 6, 7]\ntype Res2 = Unique<[1, "a", 2, "b", 2, "a"]>;\n// expected to be [1, "a", 2, "b"]\ntype Res3 = Unique<[string, number, 1, "a", 1, string, 2, "b", 2, number]>;\n// expected to be [string, number, 1, "a", 2, "b"]\ntype Res4 = Unique<[unknown, unknown, any, any, never, never]>;\n// expected to be [unknown, any, never]\n')])])]),n("p",[e._v("这道题目的思路并不复杂，我们定义第二个参数用于存储结果")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type Unique<T extends any[], S extends any[] = []> = T extends [infer First, ...infer Rest]\n  ? Include<S, First> extends true\n    ? Unique<Rest, S>\n    : Unique<Rest, [...S, First]>\n  : S;\n")])])]),n("p",[e._v("接下来就是实现这个"),n("code",[e._v("Include<T extends any[], U>")]),e._v("，用于判断T中是否包含类型"),n("code",[e._v("U")]),e._v("。")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type Include<T extends any[], U> = T extends [infer First, ...infer Rest]\n  ? IsEqual<First, U> extends true\n    ? true\n    : Include<Rest, U>\n  : false\n")])])]),n("p",[e._v("通过递归判断即可，其中"),n("code",[e._v("IsEqual")]),e._v("是之前实现过的泛型")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type IsEqual<T, U> =\n  (<K>() => K extends T ? true : false) extends (<K>() => K extends U ? true : false)\n    ? true\n    : false;\n")])])]),n("p",[e._v("这样就可以实现这个功能啦。")])])}),[],!1,null,null,null);t.default=a.exports}}]);