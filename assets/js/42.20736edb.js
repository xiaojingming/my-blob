(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{593:function(e,a,t){"use strict";t.r(a);var s=t(13),n=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"partialbykeys"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#partialbykeys"}},[e._v("#")]),e._v(" PartialByKeys")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/type-challenges/type-challenges/blob/main/questions/02757-medium-partialbykeys/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("type-challenge-partialByKeys github地址"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("难度：中等")]),e._v(" "),t("h3",{attrs:{id:"题目描述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[e._v("#")]),e._v(" 题目描述")]),e._v(" "),t("p",[e._v("Implement a generic "),t("code",[e._v("PartialByKeys<T, K>")]),e._v(" which takes two type argument T and K.")]),e._v(" "),t("p",[e._v("K specify the set of properties of T that should set to be optional. When K is not provided, it should make all properties optional just like the normal "),t("code",[e._v("Partial<T>")])]),e._v(" "),t("blockquote",[t("p",[e._v("(实现"),t("code",[e._v("PartialByKeys<T, K>")]),e._v("，接收两个类型参数"),t("code",[e._v("T")]),e._v("，"),t("code",[e._v("K")]),e._v("。"),t("code",[e._v("K")]),e._v("指定应设置为可选的"),t("code",[e._v("T")]),e._v("的属性集。当没有提供"),t("code",[e._v("K")]),e._v("时，它就和普通的"),t("code",[e._v("Partial<T>")]),e._v("一样使所有属性都是可选的。)")])]),e._v(" "),t("p",[e._v("For example:")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("interface User {\n  name: string\n  age: number\n  address: string\n}\n\ntype UserPartialName = PartialByKeys<User, 'name'>\n// { name?:string; age:number; address:string }\n")])])]),t("p",[e._v("根据题意，"),t("code",[e._v("K")]),e._v("默认为"),t("code",[e._v("T")]),e._v("所有属性")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type PartialByKeys<T, K = keyof T> = {};\n")])])]),t("p",[e._v("我们可以把分别描述可选属性和必选属性的两个类型进行合并，得到我们想要的结果")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type PartialByKeys<T, K = keyof T> = {\n  [L in keyof T as L extends K ? never : L]: T[L]\n} & {\n  [U in keyof T as U extends K ? U : never]?: T[U]\n};\n")])])]),t("p",[e._v("我们定义一个合并类型"),t("code",[e._v("Merge<T>")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type Merge<T> = {\n  [K in keyof T]: T[K];\n}\ntype PartialByKeys = Merge<{\n  [L in keyof T as L extends K ? never : L]: T[L]\n} & {\n  [U in keyof T as U extends K ? U : never]?: T[U]\n}>\n")])])]),t("p",[e._v("这样就可以将两个类型合并成一个类型")]),e._v(" "),t("p",[e._v("在查看解答的时候发现了另一种合并的方法：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type PartialByKeys<T, K extends keyof T = keyof T> = {\n  [U in keyof T as U extends K ? never : U]: T[U];\n} & {\n  [L in keyof T as L extends K ? L : never]?: T[L];\n} extends infer R \n  ? {\n    [K in keyof R]: R[K];\n  }\n  : never;\n")])])]),t("p",[e._v("将一个对象 "),t("code",[e._v("extends infer R")]),e._v(" 再重新展开，这样类型就会合并成一个对象，也可以实现"),t("code",[e._v("Merge<T>的效果")]),e._v("。")])])}),[],!1,null,null,null);a.default=n.exports}}]);