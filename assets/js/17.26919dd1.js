(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{570:function(e,t,n){"use strict";n.r(t);var s=n(13),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("h3",{attrs:{id:"bemstyleclass"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#bemstyleclass"}},[e._v("#")]),e._v(" BEMStyleClass")]),e._v(" "),n("p",[n("a",{attrs:{href:"https://github.com/type-challenges/type-challenges/blob/main/questions/03326-medium-bem-style-string/README.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("type-challenge-BEMStyleClass github地址"),n("OutboundLink")],1)]),e._v(" "),n("p",[e._v("难度：中等")]),e._v(" "),n("h4",{attrs:{id:"题目描述"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[e._v("#")]),e._v(" 题目描述")]),e._v(" "),n("p",[e._v("The Block, Element, Modifier methodology (BEM) is a popular naming convention for classes in CSS.")]),e._v(" "),n("p",[e._v("For example, the block component would be represented as btn, element that depends upon the block would be represented as btn__price, modifier that changes the style of the block would be represented as btn--big or btn__price--warning.")]),e._v(" "),n("p",[e._v("Implement "),n("code",[e._v("BEM<B, E, M>")]),e._v(" which generate string union from these three parameters. Where B is a string literal, E and M are string arrays (can be empty).")]),e._v(" "),n("blockquote",[n("p",[e._v("(实现覆盖css类名的BEM函数。函数接收三个参数，其中第一个参数是字符串，第二三个参数是可以为空的字符串数组)")])]),e._v(" "),n("p",[e._v("For example:")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type A = BEM<'btn', ['price'], []> // btn__price\ntype B = BEM<'btn', ['price'], ['warning', 'success']> // 'btn__price--warning' | 'btn__price--success'\ntype C = BEM<'btn', [], ['small', 'medium', 'large']> // 'btn--small' | 'btn--medium' | 'btn--large'\n")])])]),n("p",[e._v("这道题只需要依次判断"),n("code",[e._v("E")]),e._v("，"),n("code",[e._v("M")]),e._v("是否为空，并通过模板字符串进行拼接即可")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type BEM<B extends string, E extends string[], M extends string[]> = E['length'] extends 0\n  ? M['length'] extends 0\n    ? B\n    : `${B}--${M[number]}`\n  : M['length'] extends 0\n    ? `${B}__${E[number]}`\n    : `${B}__${E[number]}--${M[number]}`\n")])])]),n("p",[e._v("上面的代码还能够进行优化，通过观察我们可以发现，上面的结果可以写成"),n("code",[e._v("${B}${IsSafe<`__${E[number]}`>}${IsSafe<`--${M[number]}`>}")]),e._v("，问题就转换为如何实现这个类型"),n("code",[e._v("IsSafe<T extends string>")]),e._v("，其实只需要判断"),n("code",[e._v("T")]),e._v("是否是"),n("code",[e._v("never")]),e._v("类型")]),e._v(" "),n("div",{staticClass:"language- extra-class"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("type IsSafe<T> = [T] extends [never] ? '' : T\ntype BEM<B extends string, E extends string[], M extends string[]> = `${B}${IsSafe<`__${E[number]}`>}${IsSafe<`--${M[number]}`>}`\n")])])]),n("p",[e._v("这样代码就简化了很多啦")])])}),[],!1,null,null,null);t.default=a.exports}}]);