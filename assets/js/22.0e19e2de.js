(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{576:function(e,n,t){"use strict";t.r(n);var a=t(13),c=Object(a.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"fibonacci"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fibonacci"}},[e._v("#")]),e._v(" Fibonacci")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/type-challenges/type-challenges/blob/main/questions/04182-medium-fibonacci-sequence/README.zh-CN.md",target:"_blank",rel:"noopener noreferrer"}},[e._v("type-challenge-Fibonacci github地址"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("难度：中等")]),e._v(" "),t("h4",{attrs:{id:"题目描述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#题目描述"}},[e._v("#")]),e._v(" 题目描述")]),e._v(" "),t("p",[e._v("Implement a generic Fibonacci"),t("T",[e._v(" takes an number T and returns it's corresponding Fibonacci number.")])],1),e._v(" "),t("p",[e._v("The sequence starts: 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...")]),e._v(" "),t("blockquote",[t("p",[e._v("(实现类型的斐波那契数列，数列为：1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...)")])]),e._v(" "),t("p",[e._v("首先我们先用"),t("code",[e._v("ts")]),e._v("实现斐波那契数列：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("function fibonacci(n: number): number {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}\n")])])]),t("p",[t("code",[e._v("n > 2")]),e._v("的情况下等于前两项相加的和。")]),e._v(" "),t("p",[e._v("接着我们通过类型来实现，因为设计到数字计算，需要通过"),t("code",[e._v("length")]),e._v("来实现。首先我们定义一个函数，定义第一个参数"),t("code",[e._v("N")]),e._v("用于表示要计算到第几项的合，第二个参数"),t("code",[e._v("S")]),e._v("用于累加次数，当次数达到"),t("code",[e._v("N")]),e._v("时退出循环。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type Fibonacci<N extends number, S extends 1[] = [1]> = S['length'] extends N\n  ? xxxx\n  : Fibonacci<N, [...S, 1]>;\n")])])]),t("p",[e._v("这样我们就可以实现累加及退出循环的功能，同样我们使用第三个参数"),t("code",[e._v("Cur")]),e._v("用于存储下个数的结果，第四个参数"),t("code",[e._v("Prev")]),e._v("用于存储结果")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("type Fibonacci<\n  N extends number,\n  S extends 1[] = [1],\n  Cur extends 1[] = [1],\n  Prev extends 1[] = [1],\n> = S['length'] extends N\n  ? Prev['length']\n  : Fibonacci<N, [...S, 1], [...Cur, ...Prev], Cur>;\n")])])]),t("p",[e._v("这样就可以实现类型的斐波那契数列啦😉。")])])}),[],!1,null,null,null);n.default=c.exports}}]);